{"version":3,"sources":["api.js","Filters.js","Character.js","App.js","serviceWorker.js","index.js"],"names":["getData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","this","arguments","Filters","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this","react_default","createElement","className","onChange","event","props","handleFilter","name","type","placeholder","onClick","handleSorting","Component","Character","src","character","image","alt","gender","species","location","App","state","originalList","listToRender","filteringOptions","searchInList","list","option","filter","listItem","toLowerCase","includes","sortingList","preventDefault","typeOfSorting","target","sortedList","sort","i","j","setState","filterlist","generateFilteredList","newFilteringOptions","nameSearch","genderFilter","speciesFilter","locationFilter","performFiltering","input","assign","newListToRender","results","Fragment","Filters_Filters","map","src_Character","id","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd16773d.chunk.js","sourcesContent":["const url = \"https://rickandmortyapi.com/api/character/\";\n\n\nlet getData = async () => {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\n\nexport default getData;","import React, { Component } from \"react\";\nimport './Filters.css';\n\nexport class Filters extends Component {\n  render() {\n    return (\n      <div className=\"filters-wrapper\">\n        <form onChange={(event) => { this.props.handleFilter(event) }}>\n          <div className=\"filters\">\n            <input name=\"nameSearch\" type=\"text\" placeholder=\"Search by Name\" className=\"input-field\" />\n            <div className=\"input-group\">\n              Gender\n              <select name=\"genderFilter\">\n                <option value=\"all\">All</option>\n                <option value=\"male\">Male</option>\n                <option value=\"female\">Female</option>\n                <option value=\"unknown\">Unknown</option>\n              </select>\n            </div>\n            <div className=\"input-group\">\n              Species\n              <select name=\"speciesFilter\">\n                <option value=\"all\">All</option>\n                <option value=\"human\">Human</option>\n                <option value=\"alien\">Alien</option>\n                <option value=\"unknown\">Unknown</option>\n              </select>\n            </div>\n            <div className=\"input-group\">\n              Location\n              <select name=\"locationFilter\">\n                <option value=\"all\">All</option>\n                <option value=\"Earth (Replacement Dimension)\">Earth (Replacement Dimension)</option>\n                <option value=\"Anatomy Park\">Anatomy Park</option>\n                <option value=\"Citadel of Ricks\">Citadel of Ricks</option>\n                <option value=\"Interdimensional Cable\">Interdimensional Cable</option>\n                <option value=\"unknown\">unknown</option>\n              </select>\n            </div>\n            <div className=\"sorting\">\n              <button onClick={this.props.handleSorting} name=\"sort-name-acs\">Sort by Name ASC</button>\n              <button onClick={this.props.handleSorting} name=\"sort-name-desc\">Sort by Name DESC</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","import React from \"react\";\n\nconst Character = (props) => {\n  return (\n    <div className=\"card\" >\n      <div className=\"card__image\">\n        <img\n          src={props.character.image}\n          alt=\"rick\"\n        />\n      </div>\n      <div className=\"card__info\">\n        <div className=\"card__info-row\">Name: {props.character.name}</div>\n        <div className=\"card__info-row\">Gender: {props.character.gender}</div>\n        <div className=\"card__info-row\">Species: {props.character.species}</div>\n        <div className=\"card__info-row\">Location: {props.character.location.name}</div>\n      </div>\n    </div>\n  )\n}\nexport default Character;","import React, { Component } from \"react\";\nimport getData from \"./api\";\nimport \"./App.css\";\nimport { Filters } from \"./Filters\";\nimport Character from \"./Character\";\n\nclass App extends Component {\n  state = {\n    originalList: [],\n    listToRender: [],\n    filteringOptions: {},\n  }\n\n  async componentDidMount() {\n    let data = await getData();\n    this.setState({\n      originalList: data.results,\n      listToRender: data.results,\n    });\n  }\n\n  searchInList = (list, option, value) => {\n    const result = list.filter((listItem) => {\n      return listItem[option].toLowerCase().includes(value.toLowerCase());\n    });\n    return result;\n  }\n\n  sortingList = (event) => {\n    event.preventDefault();\n    const { listToRender } = this.state;\n    const typeOfSorting = event.target.name;\n    const sortedList = listToRender.sort((i, j) => {\n      if (typeOfSorting === 'sort-name-acs') {\n        return i.name > j.name ? 1 : -1;\n      } else if (typeOfSorting === 'sort-name-desc') {\n        return i.name > j.name ? -1 : 1;\n      }\n    });\n    this.setState({ listToRender: sortedList });\n  }\n\n  filterlist = (list, option, value) => {\n    let result;\n    if (value === 'all') {\n      result = list;\n    }\n    else if (option === 'location') {\n      result = list.filter((listItem) => {\n        return listItem.location.name.toLowerCase() == value.toLowerCase();\n      });\n    }\n    else {\n      result = list.filter((listItem) => {\n        return listItem[option].toLowerCase() === value;\n      });\n    }\n    return result;\n  }\n\n  generateFilteredList = (newFilteringOptions) => {\n    let listToRender = this.state.originalList;\n    const { nameSearch, genderFilter, speciesFilter, locationFilter } = newFilteringOptions;\n    if (nameSearch) {\n      listToRender = this.searchInList(listToRender, 'name', nameSearch);\n    }\n    if (genderFilter) {\n      listToRender = this.filterlist(listToRender, 'gender', genderFilter);\n    }\n    if (speciesFilter) {\n      listToRender = this.filterlist(listToRender, 'species', speciesFilter);\n    }\n    if (locationFilter) {\n      listToRender = this.filterlist(listToRender, 'location', locationFilter);\n    }\n    return listToRender;\n  }\n\n\n  performFiltering = (event) => {\n    const input = event.target;\n    const newFilteringOptions = Object.assign({}, this.state.filteringOptions);\n    newFilteringOptions[input.name] = input.value;\n    const newListToRender = this.generateFilteredList(newFilteringOptions);\n    this.setState({ listToRender: newListToRender, filteringOptions: newFilteringOptions });\n  }\n\n  render() {\n    const { listToRender } = this.state;\n    return (\n      <>\n        <Filters handleFilter={this.performFiltering} handleSorting={this.sortingList}></Filters>\n        <div className=\"card-wrapper\">\n          {\n            listToRender.map((character) => {\n              return <Character key={character.id} character={character} />\n            })\n          }\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}